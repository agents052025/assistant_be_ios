#!/usr/bin/env python3
"""
üöÄ CrashCurse AI Backend 2025 - Simplified Version
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î CrewAI 0.121.0 –∑ –±–∞–∑–æ–≤–æ—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é
"""

import os
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any

import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field

# CrewAI 2025 imports
from crewai import Agent, Task, Crew, Process
from crewai.tools import tool

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# =============================================================================
# DATA MODELS
# =============================================================================

class ChatMessage(BaseModel):
    type: str = Field(..., description="Message type")
    content: str = Field(..., description="Message content")
    timestamp: datetime = Field(default_factory=datetime.now)
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)

class ChatRequest(BaseModel):
    message: str = Field(..., description="User message")
    conversation_id: Optional[str] = Field(None, description="Conversation ID")

# =============================================================================
# SIMPLE CREWAI TOOLS
# =============================================================================

@tool("simple_responder")
def simple_response_tool(message: str) -> str:
    """–ü—Ä–æ—Å—Ç–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    # Basic response logic
    if "–ø—Ä–∏–≤—ñ—Ç" in message.lower() or "hello" in message.lower():
        return "–ü—Ä–∏–≤—ñ—Ç! –Ø AI –∞—Å–∏—Å—Ç–µ–Ω—Ç CrashCurse. –Ø–∫ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?"
    elif "–ø–ª–∞–Ω" in message.lower() or "planning" in message.lower():
        return "–î–æ–ø–æ–º–æ–∂—É –∑ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è–º! –û–ø–∏—à—ñ—Ç—å, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏."
    elif "–∫–æ–Ω—Ç–µ–Ω—Ç" in message.lower() or "content" in message.lower():
        return "–°—Ç–≤–æ—Ä—é—é –∫–æ–Ω—Ç–µ–Ω—Ç! –°–∫–∞–∂—ñ—Ç—å, —è–∫–∏–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω."
    else:
        return f"–†–æ–∑—É–º—ñ—é –≤–∞—à –∑–∞–ø–∏—Ç: '{message}'. –û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –≥–æ—Ç—É—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å..."

# =============================================================================
# SIMPLE CREWAI AGENT
# =============================================================================

def create_simple_agent():
    """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ—Å—Ç–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞"""
    return Agent(
        role="AI Assistant",
        goal="–î–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏",
        backstory="""–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è iOS –¥–æ–¥–∞—Ç–∫—É CrashCurse. 
        –¢–≤–æ—è –º–µ—Ç–∞ - –Ω–∞–¥–∞–≤–∞—Ç–∏ —è–∫—ñ—Å–Ω—É –¥–æ–ø–æ–º–æ–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.""",
        verbose=True,
        tools=[simple_response_tool],
        max_iter=2,
        memory=False  # –ü—Ä–æ—Å—Ç—ñ—à–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    )

# =============================================================================
# FASTAPI APPLICATION
# =============================================================================

app = FastAPI(
    title="CrashCurse AI Backend 2025 - Simple",
    description="Simplified CrewAI backend for iOS app",
    version="2025.1.0-simple"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# =============================================================================
# API ENDPOINTS
# =============================================================================

@app.get("/")
async def root():
    """Health check"""
    return {
        "status": "online",
        "service": "CrashCurse AI Backend 2025 - Simple",
        "version": "2025.1.0-simple",
        "framework": "CrewAI 0.121.0",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health")
async def health_check():
    """Detailed health check"""
    return {
        "status": "healthy",
        "crewai_version": "0.121.0",
        "features": ["basic_chat", "simple_agents"],
        "timestamp": datetime.now().isoformat()
    }

@app.post("/chat")
async def chat_endpoint(request: ChatRequest):
    """Simple chat endpoint with CrewAI"""
    try:
        logger.info(f"Processing chat request: {request.message}")
        
        # Create agent and task
        agent = create_simple_agent()
        
        task = Task(
            description=f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {request.message}",
            expected_output="–ö–æ—Ä–∏—Å–Ω–∞ —Ç–∞ –¥—Ä—É–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é",
            agent=agent
        )
        
        # Create crew
        crew = Crew(
            agents=[agent],
            tasks=[task],
            process=Process.sequential,
            verbose=True
        )
        
        # Execute
        result = crew.kickoff()
        
        # Prepare response
        response = ChatMessage(
            type="assistant",
            content=str(result),
            metadata={
                "conversation_id": request.conversation_id,
                "processing_time": "< 1s",
                "agent_used": "simple_agent"
            }
        )
        
        logger.info(f"Chat response prepared successfully")
        return response
        
    except Exception as e:
        logger.error(f"Chat error: {str(e)}")
        # Fallback response
        return ChatMessage(
            type="assistant",
            content=f"–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            metadata={"error": True}
        )

@app.post("/planning")
async def planning_endpoint(request: ChatRequest):
    """Simple planning endpoint"""
    return await chat_endpoint(ChatRequest(
        message=f"–°—Ç–≤–æ—Ä–∏ –ø–ª–∞–Ω –¥–ª—è: {request.message}",
        conversation_id=request.conversation_id
    ))

@app.post("/content")
async def content_endpoint(request: ChatRequest):
    """Simple content creation endpoint"""
    return await chat_endpoint(ChatRequest(
        message=f"–°—Ç–≤–æ—Ä–∏ –∫–æ–Ω—Ç–µ–Ω—Ç: {request.message}",
        conversation_id=request.conversation_id
    ))

# =============================================================================
# STARTUP
# =============================================================================

if __name__ == "__main__":
    logger.info("üöÄ Starting CrashCurse AI Backend 2025 - Simple Version")
    logger.info("Framework: CrewAI 0.121.0")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info"
    ) 