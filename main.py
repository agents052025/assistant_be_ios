from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect, Request, Header, Depends
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import os
from dotenv import load_dotenv
import logging
from contextlib import asynccontextmanager
from pydantic import BaseModel
from typing import Optional, Dict, Any
import json
from datetime import datetime
import re
import requests
import asyncio
import httpx
from fastapi.exceptions import HTTPException as FastAPIHTTPException

# Try to import openai, but make it optional
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    logger = logging.getLogger(__name__)
    logger.warning("OpenAI not installed, using fallback location extraction")

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Weather API configuration
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
OPENWEATHER_BASE_URL = os.getenv("OPENWEATHER_BASE_URL", "https://api.openweathermap.org/data/2.5")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Add calendar-specific models
class CalendarEventRequest(BaseModel):
    title: str
    start_date: str  # ISO format
    end_date: Optional[str] = None
    location: Optional[str] = None
    notes: Optional[str] = None

class CalendarEventResponse(BaseModel):
    success: bool
    event_id: Optional[str] = None
    title: str
    start_date: str
    end_date: Optional[str] = None
    location: Optional[str] = None
    message: str
    action: str = "create_calendar_event"  # Signal to iOS
    timestamp: str = datetime.now().isoformat()

# Simple response models
class ChatRequest(BaseModel):
    message: str
    user_id: Optional[str] = "anonymous"
    context: Optional[Dict[str, Any]] = None

class ChatResponse(BaseModel):
    success: bool
    message: str
    agent_id: Optional[str] = None
    conversation_id: Optional[str] = None
    timestamp: str = datetime.now().isoformat()

# Simple in-memory storage
conversations = {}
active_connections: Dict[str, WebSocket] = {}

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ Starting CrashCurse Backend (Fixed Version)...")
    logger.info("‚úÖ Backend initialized successfully")
    yield
    # Shutdown
    logger.info("üõë Shutting down CrashCurse Backend...")

# Create FastAPI app
app = FastAPI(
    title="CrashCurse AI Assistant Backend - Fixed",
    description="Fixed backend for iOS CrashCurse app",
    version="1.0.1-fixed",
    lifespan=lifespan
)

# Configure CORS
ALLOWED_ORIGINS = [
    "https://mobile.labai.ws",
    "https://mobile.labai.ws:8080",
    # Add your iOS app's custom scheme or domain if needed
]

API_KEY = os.getenv("CRASHCURSE_API_KEY", "supersecretapikey")

def verify_api_key(x_api_key: str = Header(...)):
    if x_api_key != API_KEY:
        raise FastAPIHTTPException(status_code=401, detail="Invalid API Key")

# Update CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Apply API key dependency to all endpoints except root and health
from fastapi.routing import APIRoute
for route in app.routes:
    if isinstance(route, APIRoute):
        if route.path not in ["/", "/health"]:
            route.dependant.dependencies.append(Depends(verify_api_key))

@app.get("/")
async def root():
    return {
        "message": "CrashCurse AI Assistant Backend (Fixed)",
        "version": "1.0.1-fixed",
        "status": "active",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "version": "1.0.1-fixed",
        "websocket_connections": len(active_connections),
        "mode": "fixed"
    }

# Chat endpoints
@app.post("/api/v1/chat/send")
async def send_message(request: ChatRequest):
    """Main chat endpoint with multi-agent and OpenAPI support"""
    try:
        message = request.message.strip()
        user_id = request.user_id
        
        logger.info(f"üì® Received message from {user_id}: {message[:50]}...")
        
        # Initialize response data
        agent_used = "Personal Assistant"
        api_response = None
        api_status = None
        
        # Check for API-related keywords
        message_lower = message.lower()
        api_keywords = ["api", "—Å–µ—Ä–≤—ñ—Å", "–Ω–æ–≤–∏–Ω–∏", "news", "–∫—É—Ä—Å –≤–∞–ª—é—Ç", "exchange rate"]
        is_api_request = any(keyword in message_lower for keyword in api_keywords)
        
        # Check for weather requests
        weather_keywords = ["–ø–æ–≥–æ–¥–∞", "weather", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "temperature"]
        is_weather_request = any(keyword in message_lower for keyword in weather_keywords)
        
        # Handle specific API requests
        if is_api_request and ("–Ω–æ–≤–∏–Ω–∏" in message_lower or "news" in message_lower):
            # NEWS API REQUEST
            agent_used = "News API Specialist"
            api_status = "calling_news_api"
            
            query = "Ukraine"  # Default query
            if "–ø—Ä–æ" in message_lower:
                parts = message_lower.split("–ø—Ä–æ")
                if len(parts) > 1:
                    query = parts[1].strip()
            
            news_result = await openapi_integration.get_news_via_api(query)
            if news_result.get("success"):
                api_response = {"news": news_result["data"]}
                api_status = "success"
                
                response_text = f"üì∞ **–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –ø—Ä–æ {query}:**\n\n"
                articles = news_result["data"].get("articles", [])[:3]
                for i, article in enumerate(articles, 1):
                    response_text += f"**{i}. {article['title']}**\n"
                    response_text += f"üìù {article.get('description', '–û–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')}\n"
                    response_text += f"üîó {article['url']}\n\n"
            else:
                api_status = "error"
                response_text = f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏: {news_result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}"
                
        elif is_weather_request and is_api_request:
            # WEATHER API REQUEST
            agent_used = "Weather API Specialist"
            api_status = "calling_weather_api"
            
            city = await extract_city_from_message(message)
            
            weather_result = await openapi_integration.get_weather_via_api(city)
            if weather_result.get("success"):
                api_response = {"weather": weather_result}
                api_status = "success"
                
                w = weather_result
                weather_icon = get_weather_icon(w["description"])
                response_text = f"""{weather_icon} **–ü–æ–≥–æ–¥–∞ –≤ {w["location"]}** (—á–µ—Ä–µ–∑ API)

üå°Ô∏è **{w["temperature"]}** (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {w["feels_like"]})
‚òÅÔ∏è {w["description"]}
üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {w["humidity"]}
üí® –í—ñ—Ç–µ—Ä: {w["wind_speed"]}

üì° *–î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ —á–µ—Ä–µ–∑ OpenWeatherMap API*"""
            else:
                api_status = "fallback_to_demo"
                weather_data = generate_demo_weather(city)
                response_text = f"""üå§Ô∏è **–ü–æ–≥–æ–¥–∞ –≤ {weather_data["location"]}**

üå°Ô∏è **{weather_data["temperature"]}** (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {weather_data["feels_like"]})
‚òÅÔ∏è {weather_data["description"]}
üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {weather_data["humidity"]}
üí® –í—ñ—Ç–µ—Ä: {weather_data["wind_speed"]}

üí° *–î–µ–º–æ –¥–∞–Ω—ñ - –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ API –∫–ª—é—á*"""
                
        else:
            # REGULAR PROCESSING WITH AI NAVIGATION/WEATHER/ETC
            
            # Check for navigation request first (highest priority)
            navigation_data = await ai_extract_navigation_info(message)
            
            if navigation_data.get("has_destination"):
                agent_used = "Navigation Specialist"
                destination = navigation_data["destination"]
                transport_mode = navigation_data.get("transport_mode", "–∞–≤—Ç–æ–º–æ–±—ñ–ª—å")
                
                # Generate maps URLs
                apple_maps_url = f"http://maps.apple.com/?daddr={destination}&dirflg=d"
                google_maps_url = f"https://www.google.com/maps/dir/?api=1&destination={destination}"
                
                response_text = f"""üó∫Ô∏è **–ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–æ {destination}**

üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_mode}
üìç –ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {destination}

**–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤:**
üçé Apple Maps: [–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç—É—Ç]({apple_maps_url})
üåê Google Maps: [–í—ñ–¥–∫—Ä–∏—Ç–∏]({google_maps_url})

üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ —Å–∫–∞–∂—ñ—Ç—å "–≤—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É Maps."""
                
                # Build navigation response
                response_data = {
                    "success": True,
                    "message": response_text,
                    "timestamp": datetime.now().isoformat(),
                    "navigation": True,
                    "destination": destination,
                    "transport_mode": transport_mode,
                    "apple_maps_url": apple_maps_url,
                    "maps_scheme_url": f"maps://?daddr={destination}",
                    "agent_used": agent_used
                }
                
                logger.info(f"‚úÖ Generated response for {user_id}")
                return response_data
            
            # Check for weather request
            elif is_weather_request:
                agent_used = "Weather Specialist"
                city = await extract_city_from_message(message)
                weather_data = generate_demo_weather(city)
                
                weather_icon = get_weather_icon(weather_data["description"])
                response_text = f"""{weather_icon} **–ü–æ–≥–æ–¥–∞ –≤ {weather_data["location"]}**

üå°Ô∏è **{weather_data["temperature"]}** (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {weather_data["feels_like"]})
‚òÅÔ∏è {weather_data["description"]}
üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {weather_data["humidity"]}
üí® –í—ñ—Ç–µ—Ä: {weather_data["wind_speed"]}"""
                
                response_data = {
                    "success": True,
                    "message": response_text,
                    "timestamp": datetime.now().isoformat(),
                    "weather": True,
                    "location": weather_data["location"],
                    "temperature": weather_data["temperature"],
                    "description": weather_data["description"],
                    "humidity": weather_data["humidity"],
                    "feels_like": weather_data["feels_like"],
                    "wind_speed": weather_data["wind_speed"],
                    "is_real_data": False,
                    "agent_used": agent_used
                }
                
                logger.info(f"‚úÖ Generated response for {user_id}")
                return response_data
            
            # Regular chat response
            else:
                response_text = await generate_smart_response(message)
        
        # Build final response with agent information
        response_data = {
            "success": True,
            "message": response_text,
            "timestamp": datetime.now().isoformat(),
            "agent_used": agent_used
        }
        
        if api_response:
            response_data["api_response"] = api_response
        if api_status:
            response_data["api_status"] = api_status
            
        logger.info(f"‚úÖ Generated response for {user_id}")
        return response_data
        
    except Exception as e:
        logger.error(f"Error in send_message: {e}")
        return {
            "success": False,
            "message": f"–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}",
            "timestamp": datetime.now().isoformat(),
            "agent_used": "Error Handler"
        }

@app.post("/chat")
async def simple_chat(request: ChatRequest):
    """Simplified chat endpoint for iOS compatibility"""
    try:
        logger.info(f"üì® Received message from {request.user_id}: {request.message[:100]}...")
        
        conversation_id = f"{request.user_id}_{datetime.now().timestamp()}"
        
        # Store conversation
        conversations[conversation_id] = {
            "user_id": request.user_id,
            "message": request.message,
            "timestamp": datetime.now().isoformat()
        }
        
        # Check if it's a navigation request first
        if await is_navigation_request_ai(request.message):
            navigation_details = await extract_navigation_with_ai(request.message)
            
            if navigation_details["has_destination"]:
                destination = navigation_details["destination"]
                transport_type = navigation_details["transport_type"]
                transport_mode = navigation_details["transport_mode"]
                
                destination_encoded = destination.replace(' ', '+').replace('—ñ', 'i').replace('—ó', 'i')
                apple_maps_url = f"http://maps.apple.com/?daddr={destination_encoded}&dirflg={transport_type}"
                maps_scheme_url = f"maps://?daddr={destination_encoded}&dirflg={transport_type}"
                
                # Return navigation command - NOT as text but as action fields
                return {
                    "success": True,
                    "action": "open_maps",  # TOP LEVEL ACTION
                    "navigation": True,     # NAVIGATION FLAG
                    "destination": destination,
                    "transport_type": transport_type,
                    "transport_mode": transport_mode,
                    "apple_maps_url": apple_maps_url,
                    "maps_scheme_url": maps_scheme_url,
                    "maps_url": maps_scheme_url,  # Main URL field
                    "message": f"üìç –ü—Ä–æ–∫–ª–∞–¥–∞—é –º–∞—Ä—à—Ä—É—Ç –¥–æ {destination}",  # User-friendly text
                    "conversation_id": conversation_id,
                    "agent_id": "navigation_agent",
                    "timestamp": datetime.now().isoformat()
                }
        
        # Generate smart response for non-navigation requests
        smart_response = await generate_smart_response(request.message)
        
        logger.info(f"‚úÖ Generated response for {request.user_id}")
        
        return {
            "success": True,
            "message": smart_response,
            "agent_id": "smart_agent",
            "conversation_id": conversation_id,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error in simple_chat: {e}")
        return {
            "success": False,
            "message": "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            "agent_id": "error_handler",
            "timestamp": datetime.now().isoformat()
        }

@app.post("/api/v1/calendar/create", response_model=CalendarEventResponse)
async def create_calendar_event(request: CalendarEventRequest):
    """Create a calendar event endpoint for iOS integration"""
    try:
        event_id = f"event_{int(datetime.now().timestamp())}"
        
        logger.info(f"üìÖ Creating calendar event: {request.title} at {request.start_date}")
        
        return CalendarEventResponse(
            success=True,
            event_id=event_id,
            title=request.title,
            start_date=request.start_date,
            end_date=request.end_date,
            location=request.location,
            message=f"Event '{request.title}' successfully created",
            action="create_calendar_event"
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error creating calendar event: {e}")
        return CalendarEventResponse(
            success=False,
            title=request.title if hasattr(request, 'title') else "Unknown Event",
            start_date="",
            message="Failed to create calendar event"
        )

@app.post("/api/v1/navigation/open")
async def open_navigation_direct(request: ChatRequest):
    """Direct navigation endpoint for iOS testing"""
    try:
        message = request.message
        logger.info(f"üó∫Ô∏è Direct navigation request: {message}")
        
        # Check if it's a navigation request
        if await is_navigation_request_ai(message):
            navigation_details = await extract_navigation_with_ai(message)
            
            if navigation_details["has_destination"]:
                destination = navigation_details["destination"]
                transport_type = navigation_details["transport_type"]
                transport_mode = navigation_details["transport_mode"]
                
                # Create direct maps URL
                destination_encoded = destination.replace(' ', '+').replace('—ñ', 'i').replace('—ó', 'i')
                apple_maps_url = f"http://maps.apple.com/?daddr={destination_encoded}&dirflg={transport_type}"
                maps_scheme_url = f"maps://?daddr={destination_encoded}&dirflg={transport_type}"
                
                return {
                    "success": True,
                    "action": "open_maps",
                    "destination": destination,
                    "transport_type": transport_type,
                    "transport_mode": transport_mode,
                    "apple_maps_url": apple_maps_url,
                    "maps_scheme_url": maps_scheme_url,
                    "message": f"–í—ñ–¥–∫—Ä–∏–≤–∞—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –¥–æ {destination}",
                    "ios_action": {
                        "type": "open_url",
                        "url": maps_scheme_url
                    },
                    "timestamp": datetime.now().isoformat()
                }
        
        return {
            "success": False,
            "message": "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏–π –∑–∞–ø–∏—Ç",
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Navigation error: {e}")
        return {
            "success": False,
            "message": "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó",
            "timestamp": datetime.now().isoformat()
        }

async def generate_smart_response(message: str) -> str:
    """Generate smart responses based on user input"""
    message_lower = message.lower()
    
    # Ukrainian/English greeting detection
    if any(word in message_lower for word in ['–ø—Ä–∏–≤—ñ—Ç', 'hello', 'hi', 'hey', '–≤—ñ—Ç–∞—é']):
        return "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –≤–∞—à AI –∞—Å–∏—Å—Ç–µ–Ω—Ç CrashCurse. –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è–º, –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏!"
    
    # Notes and Ideas - HIGH PRIORITY to avoid conflicts
    elif any(word in message_lower for word in ['–Ω–æ—Ç–∞—Ç–∫–∞', 'note', '–∑–∞–ø–∏—à–∏', '–∑–∞–ø–∏—Å–∞—Ç–∏', '—ñ–¥–µ—è', 'idea', '–¥—É–º–∫–∞']):
        # Extract note content
        note_keywords = ['–Ω–æ—Ç–∞—Ç–∫–∞', '–∑–∞–ø–∏—à–∏', '–∑–∞–ø–∏—Å–∞—Ç–∏', 'note', '—ñ–¥–µ—è', '–¥—É–º–∫–∞']
        note_content = message
        
        for keyword in note_keywords:
            if keyword in message_lower:
                parts = message_lower.split(keyword, 1)
                if len(parts) > 1:
                    note_content = parts[1].strip()
                    # Clean up common punctuation
                    if note_content.startswith(':'):
                        note_content = note_content[1:].strip()
                    if note_content.startswith(','):
                        note_content = note_content[1:].strip()
                break
        
        # Detect note category
        category = "–∑–∞–≥–∞–ª—å–Ω–∞"
        if any(word in message_lower for word in ['—Ä–æ–±–æ—Ç–∞', 'work', '–ø—Ä–æ–µ–∫—Ç', '–∑–∞–≤–¥–∞–Ω–Ω—è']):
            category = "—Ä–æ–±–æ—Ç–∞"
        elif any(word in message_lower for word in ['–æ—Å–æ–±–∏—Å—Ç–µ', 'personal', '–ø—Ä–∏–≤–∞—Ç–Ω–µ']):
            category = "–æ—Å–æ–±–∏—Å—Ç–µ"
        elif any(word in message_lower for word in ['—ñ–¥–µ—è', 'idea', '–ø—Ä–∏–¥—É–º–∞–≤']):
            category = "—ñ–¥–µ—ó"
            
        if note_content and len(note_content.strip()) > 0:
            notes_instruction = f"""
üìù **–ù–û–¢–ê–¢–ö–ê:**
---
NOTES_DATA: {{
    "action": "create_note",
    "content": "{note_content[:100]}",
    "category": "{category}",
    "timestamp": "{datetime.now().isoformat()}",
    "type": "note"
}}
---
"""
            
            return f"""üìù **–°—Ç–≤–æ—Ä—é—é –Ω–æ—Ç–∞—Ç–∫—É:**

üí≠ **–ó–º—ñ—Å—Ç:** {note_content}
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category}
‚è∞ **–ß–∞—Å:** {datetime.now().strftime('%H:%M')}

{notes_instruction}

üí° –ù–æ—Ç–∞—Ç–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ iOS Notes!

üóÇÔ∏è **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:**
‚Ä¢ üíº –†–æ–±–æ—Ç–∞
‚Ä¢ üë§ –û—Å–æ–±–∏—Å—Ç–µ  
‚Ä¢ üí° –Ü–¥–µ—ó
‚Ä¢ üìã –ó–∞–≥–∞–ª—å–Ω—ñ

üì± **–ö–æ–º–∞–Ω–¥–∏:**
‚Ä¢ "–ó–∞–ø–∏—à–∏ —â–æ –∑–∞–≤—Ç—Ä–∞ –∑—É—Å—Ç—Ä—ñ—á"
‚Ä¢ "–ù–æ—Ç–∞—Ç–∫–∞: –∫—É–ø–∏—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫"
‚Ä¢ "–Ü–¥–µ—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É" """
        else:
            return """üìù **–ù–æ—Ç–∞—Ç–∫–∏ —Ç–∞ –Ü–¥–µ—ó:**

‚úçÔ∏è **–®–≤–∏–¥–∫—ñ –Ω–æ—Ç–∞—Ç–∫–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ iOS Notes

üí° **–Ü–¥–µ—ó:**
‚Ä¢ –ó–∞–ø–∏—Å –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏—Ö –¥—É–º–æ–∫
‚Ä¢ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
‚Ä¢ –®–≤–∏–¥–∫–∏–π –¥–æ—Å—Ç—É–ø

üì± **–ü—Ä–∏–∫–ª–∞–¥–∏:**
‚Ä¢ "–ó–∞–ø–∏—à–∏ —â–æ –º–∞—é –ø–æ–¥–∑–≤–æ–Ω–∏—Ç–∏ –ª—ñ–∫–∞—Ä—é"
‚Ä¢ "–ù–æ—Ç–∞—Ç–∫–∞: —Ä–µ—Ü–µ–ø—Ç –±–∞–±—É—Å–∏–Ω–æ–≥–æ –±–æ—Ä—â—É"
‚Ä¢ "–Ü–¥–µ—è: –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –º–æ–≤"

–©–æ –∑–∞–ø–∏—Å–∞—Ç–∏?"""
    
    # Task/Reminder management - MOVED TO TOP PRIORITY
    elif any(word in message_lower for word in ['task', '–∑–∞–≤–¥–∞–Ω–Ω—è', 'todo', '–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', 'remind', '–Ω–∞–≥–∞–¥–∞–π']):
        # Enhanced task detection with time parsing
        time_patterns = [
            r'–æ (\d{1,2}):?(\d{2})?',  # "–æ 18:00"
            r'(\d{1,2}):(\d{2})',      # "18:00"
            r'—á–µ—Ä–µ–∑ (\d+) —Ö–≤–∏–ª–∏–Ω',     # "—á–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω"
            r'—á–µ—Ä–µ–∑ (\d+) –≥–æ–¥–∏–Ω',      # "—á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏"
        ]
        
        time_match = None
        for pattern in time_patterns:
            time_match = re.search(pattern, message)
            if time_match:
                break
                
        has_time = bool(time_match)
        has_tomorrow = any(word in message_lower for word in ['–∑–∞–≤—Ç—Ä–∞', 'tomorrow'])
        has_today = any(word in message_lower for word in ['—Å—å–æ–≥–æ–¥–Ω—ñ', 'today'])
        
        # Extract task description
        task_keywords = ['–Ω–∞–≥–∞–¥–∞–π', '–∑–∞–≤–¥–∞–Ω–Ω—è', 'task', 'remind', 'todo']
        task_description = message
        for keyword in task_keywords:
            if keyword in message_lower:
                parts = message_lower.split(keyword, 1)
                if len(parts) > 1:
                    task_description = parts[1].strip()
                break
        
        # If we have specific time info, create reminder
        if has_time and (has_tomorrow or has_today or '—á–µ—Ä–µ–∑' in message_lower):
            if '—á–µ—Ä–µ–∑' in message_lower:
                if '—Ö–≤–∏–ª–∏–Ω' in message_lower:
                    minutes = int(time_match.group(1)) if time_match else 30
                    time_str = f"—á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω"
                    date_str = "—Å—å–æ–≥–æ–¥–Ω—ñ"
                elif '–≥–æ–¥–∏–Ω' in message_lower:
                    hours = int(time_match.group(1)) if time_match else 1
                    time_str = f"—á–µ—Ä–µ–∑ {hours} –≥–æ–¥–∏–Ω"
                    date_str = "—Å—å–æ–≥–æ–¥–Ω—ñ"
            else:
                hour = time_match.group(1)
                minute = time_match.group(2) if time_match.group(2) else "00"
                time_str = f"{hour}:{minute}"
                date_str = "–∑–∞–≤—Ç—Ä–∞" if has_tomorrow else "—Å—å–æ–≥–æ–¥–Ω—ñ"
            
            reminder_instruction = f"""
üìã **–ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø –ì–û–¢–û–í–ï:**
---
REMINDER_DATA: {{
    "action": "create_reminder",
    "title": "{task_description[:50]}",
    "time": "{time_str}",
    "date": "{date_str}",
    "description": "{task_description}",
    "type": "reminder"
}}
---
"""
            
            return f"""‚è∞ **–°—Ç–≤–æ—Ä—é—é –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:**

üìù **–ó–∞–≤–¥–∞–Ω–Ω—è:** {task_description}
üïê **–ß–∞—Å:** {time_str}
üìÖ **–î–∞—Ç–∞:** {date_str}

‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—é –≤ iOS –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è...**

{reminder_instruction}

üí° –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É –≤–∞—à–æ–º—É iPhone!"""
        else:
            return """‚úÖ **–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏:**

üìù **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–≤–¥–∞–Ω—å:**
‚Ä¢ üî• –¢–µ—Ä–º—ñ–Ω–æ–≤–æ (—Å—å–æ–≥–æ–¥–Ω—ñ)
‚Ä¢ ‚≠ê –í–∞–∂–ª–∏–≤–æ (—Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å)
‚Ä¢ üìÖ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ (–º–∞–π–±—É—Ç–Ω—î)
‚Ä¢ üîÑ –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ (—â–æ–¥–Ω—è/—â–æ—Ç–∏–∂–Ω—è)

üéØ **Smart-–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:**
‚Ä¢ ‚è∞ –ó–∞ —á–∞—Å–æ–º (—á–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É)
‚Ä¢ üìç –ó–∞ –ª–æ–∫–∞—Ü—ñ—î—é (–∫–æ–ª–∏ –ø—Ä–∏–π–¥—É –¥–æ–¥–æ–º—É)
‚Ä¢ üìÖ –ó–∞ –¥–∞—Ç–æ—é (–∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ)
‚Ä¢ üîî –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ (—â–æ–¥–Ω—è –æ 9:00)

üí™ **–ü—Ä–∏–∫–ª–∞–¥–∏:**
‚Ä¢ "–ù–∞–≥–∞–¥–∞–π –∫—É–ø–∏—Ç–∏ –º–æ–ª–æ–∫–æ –æ 18:00"
‚Ä¢ "–ó–∞–≤–¥–∞–Ω–Ω—è: –∑–¥–∞—Ç–∏ –∑–≤—ñ—Ç –¥–æ –ø'—è—Ç–Ω–∏—Ü—ñ"
‚Ä¢ "–ß–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω –Ω–∞–≥–∞–¥–∞–π –ø—Ä–æ –¥–∑–≤—ñ–Ω–æ–∫"

–Ø–∫–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∏?"""
    
    # Meeting/encounter requests
    elif any(word in message_lower for word in ['–∑—É—Å—Ç—Ä—ñ—á', 'meeting', '–≤—Å—Ç—Ä–µ—á–∞']):
        # Extract meeting details from message - improved regex for Ukrainian
        time_patterns = [
            r'–æ (\d{1,2}):?(\d{2})?',  # "–æ 14:00" or "–æ 14"  
            r'(\d{1,2}):(\d{2})',      # "14:00"
            r'(\d{1,2}) –≥–æ–¥',          # "14 –≥–æ–¥"
        ]
        
        time_match = None
        for pattern in time_patterns:
            time_match = re.search(pattern, message)
            if time_match:
                break
                
        has_time = bool(time_match)
        
        has_tomorrow = any(word in message_lower for word in ['–∑–∞–≤—Ç—Ä–∞', 'tomorrow'])
        has_today = any(word in message_lower for word in ['—Å—å–æ–≥–æ–¥–Ω—ñ', 'today'])
        
        location = None
        if '–æ—Ñ—ñ—Å' in message_lower or 'office' in message_lower:
            location = "–æ—Ñ—ñ—Å"
        elif '–¥–æ–º' in message_lower or 'home' in message_lower:
            location = "–¥–æ–º"
        elif '–æ–Ω–ª–∞–π–Ω' in message_lower or 'online' in message_lower:
            location = "–æ–Ω–ª–∞–π–Ω"
            
        # If we have specific time and date info, create calendar event
        if has_time and (has_tomorrow or has_today):
            hour = time_match.group(1)
            minute = time_match.group(2) if time_match.group(2) else "00"
            time_str = f"{hour}:{minute}"
            date_str = "–∑–∞–≤—Ç—Ä–∞" if has_tomorrow else "—Å—å–æ–≥–æ–¥–Ω—ñ"
            
            calendar_instruction = f"""
üìÖ **–ö–ê–õ–ï–ù–î–ê–†–ù–ê –ü–û–î–Ü–Ø –ì–û–¢–û–í–ê:**
---
CALENDAR_EVENT_DATA: {{
    "action": "create_calendar_event",
    "title": "–ó—É—Å—Ç—Ä—ñ—á",
    "time": "{time_str}",
    "date": "{date_str}",
    "location": "{location if location else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}",
    "message": "–ó—É—Å—Ç—Ä—ñ—á {date_str} –æ {time_str}"
}}
---
"""
            
            return f"""üìÖ **–°—Ç–≤–æ—Ä—é—é –∑—É—Å—Ç—Ä—ñ—á –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ:**

üïê **–ß–∞—Å:** {time_str}
üìÖ **–î–∞—Ç–∞:** {date_str}
üìç **–ú—ñ—Å—Ü–µ:** {location if location else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}

‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—é –≤ iOS –∫–∞–ª–µ–Ω–¥–∞—Ä...**

{calendar_instruction}

üí° –ü–æ–¥—ñ—è –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É –≤–∞—à–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ iPhone!"""
        else:
            return """üìÖ **–ü–ª–∞–Ω—É—é –∑—É—Å—Ç—Ä—ñ—á –¥–ª—è –≤–∞—Å:**

ü§ù **–î–µ—Ç–∞–ª—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ:**
‚Ä¢ **–ö–æ–ª–∏:** –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å
‚Ä¢ **–î–µ:** –í–∏–∑–Ω–∞—á—Ç–µ –ª–æ–∫–∞—Ü—ñ—é (–æ—Ñ—ñ—Å/–æ–Ω–ª–∞–π–Ω/–∫–∞—Ñ–µ)
‚Ä¢ **–•—Ç–æ:** –°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤
‚Ä¢ **–©–æ:** –ú–µ—Ç–∞ —Ç–∞ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π

üìù **–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:**
1. –ü–æ–≤—ñ–¥–æ–º—Ç–µ –º–µ–Ω—ñ –¥–∞—Ç—É —Ç–∞ —á–∞—Å
2. –Ø —Å—Ç–≤–æ—Ä—é –ø–æ–¥—ñ—é –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ
3. –î–æ–¥–∞–º –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ 15 —Ö–≤–∏–ª–∏–Ω

üí° –°–∫–∞–∂—ñ—Ç—å: "–ó—É—Å—Ç—Ä—ñ—á –∑–∞–≤—Ç—Ä–∞ –æ 14:00" –∞–±–æ –ø–æ–¥—ñ–±–Ω–µ, —ñ —è –≤—Å–µ –Ω–∞–ª–∞—à—Ç—É—é!"""
    
    # Calendar addition requests
    elif any(word in message_lower for word in ['–¥–æ–¥–∞–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä', 'add to calendar', '–∫–∞–ª–µ–Ω–¥–∞—Ä', 'calendar']):
        return """üìÖ **–î–æ–¥–∞—é –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä:**

‚úÖ **–°—Ç–≤–æ—Ä—é—é –ø–æ–¥—ñ—é:**
‚Ä¢ üìç –ù–∞–∑–≤–∞: [–ë—É–¥–µ –≤–∑—è—Ç–∞ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É]
‚Ä¢ üïê –ß–∞—Å: [–í–∫–∞–∂—ñ—Ç—å —á–∞—Å]
‚Ä¢ üìç –ú—ñ—Å—Ü–µ: [–û–ø—Ü—ñ–π–Ω–æ]
‚Ä¢ üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞ 15 —Ö–≤

üéØ **–ü—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–º–∞–Ω–¥:**
‚Ä¢ "–ó—É—Å—Ç—Ä—ñ—á –∑ –∫–æ–º–∞–Ω–¥–æ—é –∑–∞–≤—Ç—Ä–∞ –æ 10:00"
‚Ä¢ "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ú–∞—Ä—ñ—ó 15 –±–µ—Ä–µ–∑–Ω—è"
‚Ä¢ "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É –ø'—è—Ç–Ω–∏—Ü—è 16:30"

üí¨ –í–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó, —ñ —è —Å—Ç–≤–æ—Ä—é –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!"""
    
    # Birthday/celebration planning
    elif any(word in message_lower for word in ['birthday', '–¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è', '—Å–≤—è—Ç–æ', '—Å–≤—è—Ç–∫—É–≤–∞–Ω–Ω—è']):
        return """üéâ **–ü–ª–∞–Ω—É—é —Å–≤—è—Ç–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∞—Å:**

üéÇ **–ü–ª–∞–Ω –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:**
‚Ä¢ üìÖ –î–∞—Ç–∞: [–ö–æ–ª–∏ —Å–≤—è—Ç–∫—É—î–º–æ?]
‚Ä¢ üë• –ì–æ—Å—Ç—ñ: [–°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π?]
‚Ä¢ üè† –ú—ñ—Å—Ü–µ: –î—ñ–º / –†–µ—Å—Ç–æ—Ä–∞–Ω / –ö–∞—Ñ–µ
‚Ä¢ üç∞ –¢–æ—Ä—Ç: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å
‚Ä¢ üéµ –†–æ–∑–≤–∞–≥–∏: –ú—É–∑–∏–∫–∞, —ñ–≥—Ä–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
‚Ä¢ üéÅ –ü–æ–¥–∞—Ä—É–Ω–∫–∏: –°–ø–∏—Å–æ–∫ —ñ–¥–µ–π

üìã **–ß–µ–∫-–ª–∏—Å—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏:**
‚úÖ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –≥–æ—Å—Ç–µ–π (–∑–∞ —Ç–∏–∂–¥–µ–Ω—å)
‚úÖ –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–æ—Ä—Ç (–∑–∞ 2-3 –¥–Ω—ñ)  
‚úÖ –ö—É–ø–∏—Ç–∏ –¥–µ–∫–æ—Ä–∞—Ü—ñ—ó
‚úÖ –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –º–µ–Ω—é

üéà –†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è - –¥–æ–ø–æ–º–æ–∂—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–µ —Å–≤—è—Ç–æ!"""
    
    # Planning tasks with more specificity
    elif any(word in message_lower for word in ['–ø–ª–∞–Ω', 'plan it', '–ø–ª–∞–Ω—É–≤–∞—Ç–∏', '–æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏', 'organize']):
        return """üìã **–°—Ç–≤–æ—Ä—é—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω:**

üéØ **–ú–µ—Ç–æ–¥–æ–ª–æ–≥—ñ—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è:**
1. **–ê–Ω–∞–ª—ñ–∑:** –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏?
2. **–ü—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—è:** –©–æ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ?
3. **–ß–∞—Å–æ–≤—ñ —Ä–∞–º–∫–∏:** –ö–æ–ª–∏ –º–∞—î –±—É—Ç–∏ –≥–æ—Ç–æ–≤–æ?
4. **–†–µ—Å—É—Ä—Å–∏:** –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è?
5. **–ö–æ–Ω—Ç—Ä–æ–ª—å:** –Ø–∫ –≤—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å?

üóÇÔ∏è **–¢–∏–ø–∏ –ø–ª–∞–Ω—ñ–≤:**
‚Ä¢ üìä –†–æ–±–æ—á—ñ –ø—Ä–æ–µ–∫—Ç–∏
‚Ä¢ üè† –î–æ–º–∞—à–Ω—ñ —Å–ø—Ä–∞–≤–∏  
‚Ä¢ üéì –ù–∞–≤—á–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫
‚Ä¢ üí™ –§—ñ—Ç–Ω–µ—Å —Ç–∞ –∑–¥–æ—Ä–æ–≤'—è
‚Ä¢ üåü –û—Å–æ–±–∏—Å—Ç—ñ —Ü—ñ–ª—ñ

üí° **–ü—Ä–∏–∫–ª–∞–¥:** "–•–æ—á—É –≤–∏–≤—á–∏—Ç–∏ —ñ—Å–ø–∞–Ω—Å—å–∫—É –∑–∞ 3 –º—ñ—Å—è—Ü—ñ" ‚Üí –æ—Ç—Ä–∏–º–∞—î—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω!"""
    
    # Weather queries - NEW FUNCTIONALITY
    elif any(word in message_lower for word in ['weather', '–ø–æ–≥–æ–¥–∞', 'temperature', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–¥–æ—â', 'rain', '—Å–æ–Ω—Ü–µ', 'sunny']):
        # Enhanced location extraction from message
        location = await extract_location_with_ai(message)
        
        # Get real weather data
        try:
            weather_data = get_weather_data_sync(location)
        except Exception as e:
            logger.error(f"Error getting weather data: {e}")
            weather_data = {
                "success": False,
                "temperature": "18¬∞C",
                "description": "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö",
                "mock_data": True
            }
            
        if weather_data["success"]:
            weather_instruction = f"""
üå§Ô∏è **–ü–û–ì–û–î–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:**
---
WEATHER_DATA: {{
    "action": "get_weather",
    "location": "{weather_data['location']}",
    "temperature": "{weather_data['temperature']}",
    "description": "{weather_data['description']}",
    "humidity": "{weather_data.get('humidity', 'N/A')}%",
    "feels_like": "{weather_data.get('feels_like', 'N/A')}",
    "wind_speed": "{weather_data.get('wind_speed', 'N/A')} –º/—Å",
    "request_type": "current",
    "real_data": true
}}
---
"""
            
            return f"""üå§Ô∏è **–ê–∫—Ç—É–∞–ª—å–Ω–∞ –ø–æ–≥–æ–¥–∞ –≤ {weather_data['location']}:**\n\nüå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {weather_data['temperature']} (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {weather_data.get('feels_like', 'N/A')})\n‚òÅÔ∏è **–û–ø–∏—Å:** {weather_data['description']}\nüíß **–í–æ–ª–æ–≥—ñ—Å—Ç—å:** {weather_data.get('humidity', 'N/A')}%\nüí® **–í—ñ—Ç–µ—Ä:** {weather_data.get('wind_speed', 'N/A')} –º/—Å\n"""
        else:
            # Fallback to mock data
            weather_instruction = f"""
üå§Ô∏è **–ü–û–ì–û–î–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:**
---
WEATHER_DATA: {{
    "action": "get_weather",
    "location": "{location}",
    "temperature": "{weather_data['temperature']}",
    "description": "{weather_data['description']}",
    "request_type": "current",
    "real_data": false,
    "error": "{weather_data.get('message', 'API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ')}"
}}
---
"""
            
            return f"""üå§Ô∏è **–ü–æ–≥–æ–¥–∞ –≤ {location} (–¥–µ–º–æ-—Ä–µ–∂–∏–º):**\n\nüå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {weather_data['temperature']}\n‚òÅÔ∏è **–û–ø–∏—Å:** {weather_data['description']}\n"""
    
    # Contacts and Communication - NEW FUNCTIONALITY
    elif any(word in message_lower for word in ['–ø–æ–¥–∑–≤–æ–Ω–∏', 'call', '–¥–∑–≤—ñ–Ω–æ–∫', 'sms', '—Å–º—Å', '–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', 'message', '–∫–æ–Ω—Ç–∞–∫—Ç', 'contact']):
        # Extract contact name if mentioned
        contact_keywords = ['–ø–æ–¥–∑–≤–æ–Ω–∏', '–¥–∑–≤—ñ–Ω–æ–∫', '–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', '–Ω–∞–¥—ñ—à–ª–∏']
        contact_name = None
        action_type = "call"
        
        if 'sms' in message_lower or '—Å–º—Å' in message_lower or '–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è' in message_lower:
            action_type = "sms"
            
        # Try to extract contact name
        for keyword in contact_keywords:
            if keyword in message_lower:
                parts = message_lower.split(keyword, 1)
                if len(parts) > 1:
                    potential_name = parts[1].strip().split()[0] if parts[1].strip() else None
                    if potential_name and len(potential_name) > 2:
                        contact_name = potential_name.capitalize()
                break
                
        if not contact_name:
            # Try common names
            names = ['–º–∞–º–∞', '—Ç–∞—Ç–æ', '–º–∞–º—ñ', '—Ç–∞—Ç–æ–≤—ñ', '—ñ–≤–∞–Ω', '–º–∞—Ä—ñ—è', '–æ–ª–µ–∫—Å—ñ–π', '–∞–Ω–Ω–∞']
            for name in names:
                if name in message_lower:
                    contact_name = name.capitalize()
                    break
        
        if contact_name:
            contact_instruction = f"""
üì± **–ö–û–ù–¢–ê–ö–¢–ù–ê –î–Ü–Ø:**
---
CONTACT_DATA: {{
    "action": "{action_type}",
    "contact_name": "{contact_name}",
    "message": "{message}",
    "type": "communication"
}}
---
"""
            
            action_text = "–î–∑–≤–æ–Ω—é" if action_type == "call" else "–ù–∞–¥—Å–∏–ª–∞—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
            return f"""üì± **{action_text} {contact_name}:**

üë§ **–ö–æ–Ω—Ç–∞–∫—Ç:** {contact_name}
üìû **–î—ñ—è:** {action_text}
üîÑ **–í–∏–∫–æ–Ω—É—é...**

{contact_instruction}

üí° –î—ñ—è –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ —á–µ—Ä–µ–∑ iOS!"""
        else:
            return """üì± **–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è:**

üìû **–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:**
‚Ä¢ –î–∑–≤—ñ–Ω–∫–∏: "–ü–æ–¥–∑–≤–æ–Ω–∏ –º–∞–º—ñ"
‚Ä¢ SMS: "–ù–∞–¥—ñ—à–ª–∏ SMS –Ü–≤–∞–Ω–æ–≤—ñ"
‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞—Ç–æ–≤—ñ —â–æ —Å–ø—ñ–∑–Ω—é—é—Å—è"

üë• **–ö–æ–Ω—Ç–∞–∫—Ç–∏:**
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ñ–º–µ–Ω–∞ –∑ –≤–∞—à–æ—ó –∞–¥—Ä–µ—Å–Ω–æ—ó –∫–Ω–∏–≥–∏
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: –º–∞–º–∞, —Ç–∞—Ç–æ, —Ä–æ–¥–∏–Ω–∞, –¥—Ä—É–∑—ñ

üí¨ **–ü—Ä–∏–∫–ª–∞–¥–∏:**
‚Ä¢ "–ü–æ–¥–∑–≤–æ–Ω–∏ –ú–∞—Ä—ñ—ó"
‚Ä¢ "SMS –º–∞–º—ñ —â–æ –≤—Å–µ –¥–æ–±—Ä–µ"
‚Ä¢ "–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –û–ª–µ–∫—Å—ñ—é –ø—Ä–æ –∑—É—Å—Ç—Ä—ñ—á"

–í–∫–∞–∂—ñ—Ç—å —ñ–º'—è –∫–æ–Ω—Ç–∞–∫—Ç—É!"""
    
    # Finance and Shopping - NEW FUNCTIONALITY  
    elif any(word in message_lower for word in ['–≤–∏—Ç—Ä–∞—Ç–∞', '–≤–∏—Ç—Ä–∞—Ç–∏', 'expense', '–∫—É–ø–∏—Ç–∏', 'buy', 'shopping', '–ø–æ–∫—É–ø–∫–∏', '—Å–ø–∏—Å–æ–∫', 'list', '–≥—Ä–æ—à—ñ', 'money', '–≥—Ä–Ω', 'uah', '–¥–æ–ª–∞—Ä', 'dollar']):
        # Detect if it's expense tracking or shopping list
        if any(word in message_lower for word in ['–≤–∏—Ç—Ä–∞—Ç–∞', '–≤–∏—Ç—Ä–∞—Ç–∏', 'expense', '–≥—Ä–Ω', '–¥–æ–ª–∞—Ä', '–≥—Ä–æ—à—ñ']):
            # Extract amount and description
            amount_match = re.search(r'(\d+(?:\.\d{2})?)\s*(?:–≥—Ä–Ω|uah|–¥–æ–ª–∞—Ä|dollar|\$)', message_lower)
            amount = amount_match.group(1) if amount_match else None
            
            # Extract expense description
            expense_desc = message.lower()
            for word in ['–≤–∏—Ç—Ä–∞—Ç–∞', '–≤–∏—Ç—Ä–∞—Ç–∏', 'expense']:
                if word in expense_desc:
                    expense_desc = expense_desc.split(word, 1)[1].strip() if word in expense_desc else expense_desc
                    break
            
            if amount:
                finance_instruction = f"""
üí∞ **–§–Ü–ù–ê–ù–°–û–í–ê –û–ü–ï–†–ê–¶–Ü–Ø:**
---
FINANCE_DATA: {{
    "action": "add_expense",
    "amount": "{amount}",
    "description": "{expense_desc}",
    "currency": "UAH",
    "type": "expense"
}}
---
"""
                
                return f"""üí∞ **–î–æ–¥–∞—é –≤–∏—Ç—Ä–∞—Ç—É:**

üíµ **–°—É–º–∞:** {amount} –≥—Ä–Ω
üìù **–û–ø–∏—Å:** {expense_desc}
üìÖ **–î–∞—Ç–∞:** —Å—å–æ–≥–æ–¥–Ω—ñ

{finance_instruction}

üí° –í–∏—Ç—Ä–∞—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –≤–∞—à–æ–º—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–º—É —Ç—Ä–µ–∫—É!"""
            else:
                return """üí∞ **–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –¢—Ä–µ–∫–µ—Ä:**

üíµ **–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç:**
‚Ä¢ "–í–∏—Ç—Ä–∞—Ç–∞ 150 –≥—Ä–Ω –Ω–∞ –∫–∞–≤—É"
‚Ä¢ "Expense 25 USD for lunch"
‚Ä¢ "–°–ø–ª–∞—Ç–∏–≤ 500 –≥—Ä–Ω –∑–∞ –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ"

üìä **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:**
‚Ä¢ üçΩÔ∏è –á–∂–∞ —Ç–∞ –Ω–∞–ø–æ—ó
‚Ä¢ üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç  
‚Ä¢ üè† –î—ñ–º —Ç–∞ –ø–æ–±—É—Ç
‚Ä¢ üíº –†–æ–±–æ—Ç–∞
‚Ä¢ üéØ –†–æ–∑–≤–∞–≥–∏

üí° –í–∫–∞–∂—ñ—Ç—å —Å—É–º—É —Ç–∞ –æ–ø–∏—Å –≤–∏—Ç—Ä–∞—Ç–∏!"""
                
        else:
            # Shopping list functionality
            # Extract items from message
            items = []
            shopping_keywords = ['–∫—É–ø–∏—Ç–∏', '—Å–ø–∏—Å–æ–∫', 'shopping', '–ø–æ–∫—É–ø–∫–∏']
            item_text = message.lower()
            
            for keyword in shopping_keywords:
                if keyword in item_text:
                    item_text = item_text.split(keyword, 1)[1].strip() if keyword in item_text else item_text
                    break
                    
            # Parse items (comma separated or "and" separated)
            if '—Ç–∞' in item_text or '—ñ' in item_text or ',' in item_text:
                separators = [',', ' —Ç–∞ ', ' —ñ ', ' and ']
                for sep in separators:
                    if sep in item_text:
                        items = [item.strip() for item in item_text.split(sep) if item.strip()]
                        break
            else:
                items = [item_text.strip()] if item_text.strip() else []
                
            if items:
                shopping_instruction = f"""
üõí **–°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö:**
---
SHOPPING_DATA: {{
    "action": "add_to_shopping_list",
    "items": {items},
    "message": "–î–æ–¥–∞–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫",
    "type": "shopping"
}}
---
"""
                
                items_text = "\n".join([f"‚Ä¢ {item}" for item in items])
                return f"""üõí **–î–æ–¥–∞—é –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:**

üìù **–¢–æ–≤–∞—Ä–∏:**
{items_text}

{shopping_instruction}

üí° –°–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ iOS Reminders!"""
            else:
                return """üõí **–°–ø–∏—Å–æ–∫ –ü–æ–∫—É–ø–æ–∫:**

üìù **–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤:**
‚Ä¢ "–ö—É–ø–∏—Ç–∏ –º–æ–ª–æ–∫–æ —Ç–∞ —Ö–ª—ñ–±"
‚Ä¢ "–°–ø–∏—Å–æ–∫: —è–±–ª—É–∫–∞, –±–∞–Ω–∞–Ω–∏, —Å–∏—Ä"
‚Ä¢ "–ü–æ–∫—É–ø–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: –º'—è—Å–æ —ñ –æ–≤–æ—á—ñ"

üõçÔ∏è **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:**
‚Ä¢ ü•õ –ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
‚Ä¢ üçû –•–ª—ñ–± —Ç–∞ –≤–∏–ø—ñ—á–∫–∞
‚Ä¢ ü•ï –û–≤–æ—á—ñ —Ç–∞ —Ñ—Ä—É–∫—Ç–∏
‚Ä¢ ü•© –ú'—è—Å–æ —Ç–∞ —Ä–∏–±–∞
‚Ä¢ üß¥ –ü–æ–±—É—Ç–æ–≤–∞ —Ö—ñ–º—ñ—è

üí° –ü–µ—Ä–µ—Ä–∞—Ö—É–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É!"""
    
    # Transport and Navigation - AI-POWERED
    elif await is_navigation_request_ai(message):
        # Use AI to extract navigation details
        navigation_details = await extract_navigation_with_ai(message)
        
        if navigation_details["has_destination"]:
            # Create Apple Maps URL for direct navigation
            destination = navigation_details["destination"]
            transport_type = navigation_details["transport_type"]
            transport_mode = navigation_details["transport_mode"]
            
            # Enhanced Apple Maps URL with better iOS compatibility
            destination_encoded = destination.replace(' ', '+').replace('—ñ', 'i').replace('—ó', 'i')
            
            # Multiple URL formats for better compatibility
            apple_maps_url = f"http://maps.apple.com/?daddr={destination_encoded}&dirflg={transport_type}"
            maps_scheme_url = f"maps://?daddr={destination_encoded}&dirflg={transport_type}"
            google_maps_fallback = f"https://www.google.com/maps/dir/?api=1&destination={destination_encoded}&travelmode={transport_type}"
            
            # Return structured response for iOS to handle
            return f"""üìç –ü—Ä–æ–∫–ª–∞–¥–∞—é –º–∞—Ä—à—Ä—É—Ç –¥–æ {destination}

üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_mode}
üì± –í—ñ–¥–∫—Ä–∏–≤–∞—é Apple Maps...

{{
    "action": "open_maps",
    "destination": "{destination}",
    "transport_type": "{transport_type}",
    "apple_maps_url": "{apple_maps_url}",
    "maps_scheme_url": "{maps_scheme_url}",
    "google_maps_fallback": "{google_maps_fallback}",
    "success": true,
    "message": "–ú–∞—Ä—à—Ä—É—Ç –¥–æ {destination} –≥–æ—Ç–æ–≤–∏–π!"
}}"""
        else:
            return """üöó **–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Ç–∞ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è:**

üó∫Ô∏è **–ú–∞—Ä—à—Ä—É—Ç–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –∑ –ø—Ä–æ–±–∫–∞–º–∏
‚Ä¢ –ì—Ä–æ–º–∞–¥—Å—å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
‚Ä¢ –ü—ñ—à–æ—Ö—ñ–¥–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏

üöå **–ì—Ä–æ–º–∞–¥—Å—å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:**
‚Ä¢ –†–æ–∑–∫–ª–∞–¥ –∞–≤—Ç–æ–±—É—Å—ñ–≤/–º–∞—Ä—à—Ä—É—Ç–æ–∫
‚Ä¢ –°—Ç–∞–Ω—Ü—ñ—ó –º–µ—Ç—Ä–æ
‚Ä¢ –ß–∞—Å –ø—Ä–∏–±—É—Ç—Ç—è

üì± **–ö–æ–º–∞–Ω–¥–∏:**
‚Ä¢ "–ú–∞—Ä—à—Ä—É—Ç –¥–æ [–º—ñ—Å—Ü–µ]"
‚Ä¢ "–ü—Ä–æ–±–∫–∏ –Ω–∞ [–≤—É–ª–∏—Ü—è]"
‚Ä¢ "–Ø–∫ –¥–æ—ó—Ö–∞—Ç–∏ –¥–æ [–∞–¥—Ä–µ—Å–∞]"

–í–∫–∞–∂—ñ—Ç—å –ø—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è!"""
    
    # News and Information - NEW FUNCTIONALITY
    elif any(word in message_lower for word in ['–Ω–æ–≤–∏–Ω–∏', 'news', '—â–æ –Ω–æ–≤–æ–≥–æ', 'events', '–ø–æ–¥—ñ—ó', '—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è']):
        # Detect news category
        category = "–∑–∞–≥–∞–ª—å–Ω—ñ"
        if any(word in message_lower for word in ['—Å–ø–æ—Ä—Ç', 'sport', '—Ñ—É—Ç–±–æ–ª', '–±–∞—Å–∫–µ—Ç–±–æ–ª']):
            category = "—Å–ø–æ—Ä—Ç"
        elif any(word in message_lower for word in ['—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó', 'tech', 'it', '–∞–π—Ç—ñ']):
            category = "—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó"
        elif any(word in message_lower for word in ['–ø–æ–ª—ñ—Ç–∏–∫–∞', 'politics', '–≤–∏–±–æ—Ä–∏']):
            category = "–ø–æ–ª—ñ—Ç–∏–∫–∞"
        elif any(word in message_lower for word in ['–±—ñ–∑–Ω–µ—Å', 'business', '–µ–∫–æ–Ω–æ–º—ñ–∫–∞']):
            category = "–±—ñ–∑–Ω–µ—Å"
            
        news_instruction = f"""
üì∞ **–ù–û–í–ò–ù–ò:**
---
NEWS_DATA: {{
    "action": "get_news",
    "category": "{category}",
    "location": "Ukraine",
    "language": "uk",
    "type": "news"
}}
---
"""
        
        return f"""üì∞ **–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ ({category}):**

üîÑ **–û–Ω–æ–≤–ª—é—é —Å—Ç—Ä—ñ—á–∫—É –Ω–æ–≤–∏–Ω...**
üìç **–†–µ–≥—ñ–æ–Ω:** –£–∫—Ä–∞—ó–Ω–∞
üóûÔ∏è **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category}

{news_instruction}

üí° –ù–æ–≤–∏–Ω–∏ –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ –≤ –¥–æ–¥–∞—Ç–∫—É!

üì± **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:**
‚Ä¢ üåç –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏
‚Ä¢ ‚öΩ –°–ø–æ—Ä—Ç
‚Ä¢ üíª –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó  
‚Ä¢ üìÖ –ü–æ–ª—ñ—Ç–∏–∫–∞
‚Ä¢ üíº –ë—ñ–∑–Ω–µ—Å

üéØ **–ü—Ä–∏–∫–ª–∞–¥–∏:**
‚Ä¢ "–°–ø–æ—Ä—Ç–∏–≤–Ω—ñ –Ω–æ–≤–∏–Ω–∏"
‚Ä¢ "–©–æ –Ω–æ–≤–æ–≥–æ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è—Ö?"
‚Ä¢ "–û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó" """
    
    # Health and Fitness - NEW FUNCTIONALITY
    elif any(word in message_lower for word in ['–∑–¥–æ—Ä–æ–≤\'—è', 'health', '—Ñ—ñ—Ç–Ω–µ—Å', 'fitness', '—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', 'workout', '–ª—ñ–∫–∏', 'medicine', '–≤–æ–¥–∞', 'water']):
        # Detect health action type
        action_type = "general"
        activity_data = {}
        
        if any(word in message_lower for word in ['—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', 'workout', '—Ñ—ñ—Ç–Ω–µ—Å', '–±—ñ–≥', 'running']):
            action_type = "workout"
            # Extract workout type
            if '–±—ñ–≥' in message_lower or 'running' in message_lower:
                activity_data['workout_type'] = '–±—ñ–≥'
            elif '—Å–ø–æ—Ä—Ç–∑–∞–ª' in message_lower or 'gym' in message_lower:
                activity_data['workout_type'] = '—Å–ø–æ—Ä—Ç–∑–∞–ª'
            else:
                activity_data['workout_type'] = '–∑–∞–≥–∞–ª—å–Ω–µ'
                
        elif any(word in message_lower for word in ['–ª—ñ–∫–∏', 'medicine', '—Ç–∞–±–ª–µ—Ç–∫–∏', 'pills']):
            action_type = "medication"
            # Extract medication info
            med_match = re.search(r'(–ª—ñ–∫–∏|—Ç–∞–±–ª–µ—Ç–∫–∏|medicine)\s+([–∞-—èa-z]+)', message_lower)
            if med_match:
                activity_data['medication'] = med_match.group(2)
                
        elif any(word in message_lower for word in ['–≤–æ–¥–∞', 'water', '–ø–∏—Ç–∏', 'drink']):
            action_type = "hydration"
            # Extract water amount
            water_match = re.search(r'(\d+)\s*(–º–ª|ml|–ª|l)', message_lower)
            if water_match:
                activity_data['amount'] = water_match.group(1)
                activity_data['unit'] = water_match.group(2)
        
        health_instruction = f"""
üíä **–ó–î–û–†–û–í'–Ø:**
---
HEALTH_DATA: {{
    "action": "{action_type}",
    "data": {activity_data},
    "timestamp": "{datetime.now().isoformat()}",
    "type": "health"
}}
---
"""
        
        if action_type == "workout":
            return f"""üí™ **–§—ñ—Ç–Ω–µ—Å —Ç—Ä–µ–∫–µ—Ä:**

üèÉ‚Äç‚ôÇÔ∏è **–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:** {activity_data.get('workout_type', '–∑–∞–≥–∞–ª—å–Ω–µ')}
‚è∞ **–ß–∞—Å –ø–æ—á–∞—Ç–∫—É:** {datetime.now().strftime('%H:%M')}
üìä **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–Ω–µ

{health_instruction}

üí° –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–æ –≤ Apple Health!

üéØ **–¢–∏–ø–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:**
‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è –ë—ñ–≥
‚Ä¢ üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç–∑–∞–ª
‚Ä¢ üö¥‚Äç‚ôÇÔ∏è –í–µ–ª–æ—Å–∏–ø–µ–¥
‚Ä¢ üßò‚Äç‚ôÇÔ∏è –ô–æ–≥–∞ """
            
        elif action_type == "medication":
            medication = activity_data.get('medication', '–ª—ñ–∫–∏')
            return f"""üíä **–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ª—ñ–∫–∏:**

üíä **–ü—Ä–µ–ø–∞—Ä–∞—Ç:** {medication}
‚è∞ **–ß–∞—Å –ø—Ä–∏–π–æ–º—É:** {datetime.now().strftime('%H:%M')}
‚úÖ **–°—Ç–∞—Ç—É—Å:** –ü—Ä–∏–π–Ω—è—Ç–æ

{health_instruction}

üí° –ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ –≤ Health app!

üìã **–§—É–Ω–∫—Ü—ñ—ó:**
‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–π–æ–º
‚Ä¢ –¢—Ä–µ–∫—ñ–Ω–≥ –¥–æ–∑—É–≤–∞–Ω–Ω—è
‚Ä¢ –Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–∏–π–æ–º—É """
            
        elif action_type == "hydration":
            amount = activity_data.get('amount', '250')
            unit = activity_data.get('unit', '–º–ª')
            return f"""üíß **–¢—Ä–µ–∫–µ—Ä –≤–æ–¥–∏:**

üíß **–í–∏–ø–∏—Ç–æ:** {amount} {unit}
üìä **–ü—Ä–æ–≥—Ä–µ—Å:** –û–Ω–æ–≤–ª–µ–Ω–æ
üéØ **–¶—ñ–ª—å:** 2000 –º–ª/–¥–µ–Ω—å

{health_instruction}

üí° –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ Apple Health!

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –î–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞
‚Ä¢ –ù–µ–¥—ñ–ª—å–Ω–∏–π –∑–≤—ñ—Ç
‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–∏—Ç–∏ """
        else:
            return """üíä **–ó–¥–æ—Ä–æ–≤'—è —Ç–∞ –§—ñ—Ç–Ω–µ—Å:**

üí™ **–§—ñ—Ç–Ω–µ—Å:**
‚Ä¢ –¢—Ä–µ–∫—ñ–Ω–≥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
‚Ä¢ –ö–∞—Ä–¥—ñ–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å  
‚Ä¢ –°–∏–ª–æ–≤—ñ –≤–ø—Ä–∞–≤–∏
‚Ä¢ –ö–∞–ª–æ—Ä—ñ—ó

üíä **–õ—ñ–∫–∏:**
‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–π–æ–º
‚Ä¢ –†–æ–∑–∫–ª–∞–¥ –ª—ñ–∫—ñ–≤
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ–∑—É–≤–∞–Ω–Ω—è

üíß **–í–æ–¥–∞:**
‚Ä¢ –©–æ–¥–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞
‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–∏—Ç–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è

üì± **–ü—Ä–∏–∫–ª–∞–¥–∏:**
‚Ä¢ "–ü–æ—á–∞–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±—ñ–≥"
‚Ä¢ "–ü—Ä–∏–π–Ω—è–≤ –ª—ñ–∫–∏ –∞—Å–ø—ñ—Ä–∏–Ω"
‚Ä¢ "–í–∏–ø–∏–≤ 500 –º–ª –≤–æ–¥–∏"

–©–æ –≤—ñ–¥–∑–Ω–∞—á–∏—Ç–∏?"""
    
    # Generic responses with better context understanding
    else:
        # Try to detect specific intents
        if any(word in message_lower for word in ['–∑–∞–≤—Ç—Ä–∞', 'tomorrow', '—Å—å–æ–≥–æ–¥–Ω—ñ', 'today']):
            return f"""üìÖ **–ü–ª–∞–Ω—É—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–∞—Å—É: "{message}"**

üïê **–†–æ–∑—É–º—ñ—é —á–∞—Å–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:**
‚Ä¢ –ó–∞–≤—Ç—Ä–∞ = –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å
‚Ä¢ –°—å–æ–≥–æ–¥–Ω—ñ = –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å  
‚Ä¢ –¶–µ–π —Ç–∏–∂–¥–µ–Ω—å = –Ω–∞–π–±–ª–∏–∂—á—ñ 7 –¥–Ω—ñ–≤

üí° **–£—Ç–æ—á–Ω—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ:**
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å (–æ 14:00)
‚Ä¢ –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–∑—É—Å—Ç—Ä—ñ—á/–∑–∞–≤–¥–∞–Ω–Ω—è/–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è)
‚Ä¢ –õ–æ–∫–∞—Ü—ñ—è (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)

üéØ –ü—Ä–∏–∫–ª–∞–¥: "–ó—É—Å—Ç—Ä—ñ—á –∑–∞–≤—Ç—Ä–∞ –æ 10:00 –≤ –æ—Ñ—ñ—Å—ñ"

–©–æ —Å–∞–º–µ –ø–ª–∞–Ω—É—î–º–æ?"""
        
        elif any(word in message_lower for word in ['—á–∞—Å', 'time', '–∫–æ–ª–∏', 'when']):
            return f"""‚è∞ **–ü—Ä–∞—Ü—é—é –∑ —á–∞—Å–æ–º: "{message}"**

üïê **–§–æ—Ä–º–∞—Ç–∏ —á–∞—Å—É:**
‚Ä¢ 24-–≥–æ–¥–∏–Ω–Ω–∏–π: 14:00, 09:30
‚Ä¢ 12-–≥–æ–¥–∏–Ω–Ω–∏–π: 2 PM, 9:30 AM
‚Ä¢ –°–ª–æ–≤–µ—Å–Ω–∏–π: –ø–æ–ø–æ–ª—É–¥–Ω—ñ, –≤—Ä–∞–Ω—Ü—ñ, –≤–≤–µ—á–µ—Ä—ñ

üìÖ **–î–∞—Ç–∏:**
‚Ä¢ –í—ñ–¥–Ω–æ—Å–Ω—ñ: –∑–∞–≤—Ç—Ä–∞, –ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ: 15 –±–µ—Ä–µ–∑–Ω—è, 23.12.2025
‚Ä¢ –î–Ω—ñ —Ç–∏–∂–Ω—è: –ø–æ–Ω–µ–¥—ñ–ª–æ–∫, –ø'—è—Ç–Ω–∏—Ü—è

üí≠ –î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –¥–æ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É!"""
        
        else:
            return f"""üí≠ **–ê–Ω–∞–ª—ñ–∑—É—é –∑–∞–ø–∏—Ç:** "{message}"

üéØ **–ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑:**
‚Ä¢ üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–µ–º —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è–º
‚Ä¢ ‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è–º–∏ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏  
‚Ä¢ üóÇÔ∏è –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—î—é –ø—Ä–æ–µ–∫—Ç—ñ–≤
‚Ä¢ üí° –Ü–¥–µ—è–º–∏ —Ç–∞ –ø–æ—Ä–∞–¥–∞–º–∏

üîç **–î–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –¥–æ–¥–∞–π—Ç–µ:**
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å –∞–±–æ –¥–∞—Ç—É
‚Ä¢ –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
‚Ä¢ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ

üí¨ **–ü—Ä–∏–∫–ª–∞–¥–∏:**
‚Ä¢ "–ù–∞–≥–∞–¥–∞–π –ø—Ä–æ –∑—É—Å—Ç—Ä—ñ—á –∑–∞–≤—Ç—Ä–∞"
‚Ä¢ "–ü–ª–∞–Ω –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –µ–∫–∑–∞–º–µ–Ω—É"
‚Ä¢ "–û—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"

–£—Ç–æ—á–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ?"""

async def extract_location_with_ai(message: str) -> str:
    """Use OpenAI to intelligently extract city name from natural language"""
    if not OPENAI_AVAILABLE or not OPENAI_API_KEY:
        logger.warning("OpenAI not available, using fallback location extraction")
        return extract_location_fallback(message)
    
    try:
        system_prompt = """–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –≥–µ–æ–≥—Ä–∞—Ñ—ñ—ó —Ç–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º—ñ—Å—Ç. 
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - –≤–∏—Ç—è–≥—Ç–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∑ —Ä–µ—á–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —ó—ó —É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.

–ü—Ä–∞–≤–∏–ª–∞:
1. –î–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –º—ñ—Å—Ç: –ø–æ–≤–µ—Ä—Ç–∞–π —É –Ω–∞–∑–∏–≤–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É (–ö–∏—ó–≤, –õ—å–≤—ñ–≤, –•–∞—Ä–∫—ñ–≤, –û–¥–µ—Å–∞)
2. –î–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –º—ñ—Å—Ç: –ø–æ–≤–µ—Ä—Ç–∞–π –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é (London, New York, Paris)
3. –Ø–∫—â–æ –º—ñ—Å—Ç–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ - –ø–æ–≤–µ—Ä–Ω–∏ "–ö–∏—ó–≤" 
4. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –õ–ò–®–ï –Ω–∞–∑–≤–æ—é –º—ñ—Å—Ç–∞, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å
5. –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–π —Ä—ñ–∑–Ω—ñ –≤—ñ–¥–º—ñ–Ω–∫–∏ —Ç–∞ –º–æ–≤–∏

–ü—Ä–∏–∫–ª–∞–¥–∏:
"–ü–æ–≥–æ–¥–∞ —É –õ—å–≤–æ–≤—ñ" ‚Üí "–õ—å–≤—ñ–≤"
"Weather in London" ‚Üí "London" 
"–•–∞—Ä–∫–æ–≤—ñ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–æ—â?" ‚Üí "–•–∞—Ä–∫—ñ–≤"
"What about Paris?" ‚Üí "Paris"
"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" ‚Üí "–ö–∏—ó–≤"
"–≤ –û–¥–µ—Å—ñ" ‚Üí "–û–¥–µ—Å–∞"
"New York weather" ‚Üí "New York" """

        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message}
            ],
            max_tokens=20,
            temperature=0.1
        )
        
        city = response.choices[0].message.content.strip()
        logger.info(f"ü§ñ AI extracted city: '{city}' from message: '{message}'")
        return city
        
    except Exception as e:
        logger.error(f"‚ùå OpenAI location extraction failed: {e}")
        return extract_location_fallback(message)

def extract_location_fallback(message: str) -> str:
    """Fallback location extraction for when AI is not available"""
    message_lower = message.lower()
    
    # Simple fallback - check for major Ukrainian cities
    city_mentions = {
        '–ª—å–≤—ñ–≤': '–õ—å–≤—ñ–≤', 'lviv': '–õ—å–≤—ñ–≤', '–ª—å–≤–æ–≤—ñ': '–õ—å–≤—ñ–≤',
        '—Ö–∞—Ä–∫—ñ–≤': '–•–∞—Ä–∫—ñ–≤', 'kharkiv': '–•–∞—Ä–∫—ñ–≤', '—Ö–∞—Ä–∫–æ–≤—ñ': '–•–∞—Ä–∫—ñ–≤', 
        '–æ–¥–µ—Å–∞': '–û–¥–µ—Å–∞', 'odesa': '–û–¥–µ—Å–∞', '–æ–¥–µ—Å—ñ': '–û–¥–µ—Å–∞',
        '–¥–Ω—ñ–ø—Ä–æ': '–î–Ω—ñ–ø—Ä–æ', 'dnipro': '–î–Ω—ñ–ø—Ä–æ', '–¥–Ω—ñ–ø—Ä—ñ': '–î–Ω—ñ–ø—Ä–æ'
    }
    
    for key, city in city_mentions.items():
        if key in message_lower:
            return city
            
    return "–ö–∏—ó–≤"  # Default

def get_weather_data_sync(location: str) -> Dict[str, Any]:
    """Get weather data - enhanced mock system with realistic data until API activates"""
    if not OPENWEATHER_API_KEY:
        return generate_realistic_weather_mock(location, "API key not configured")
    
    # Simplified city coordinates mapping - AI handles the recognition
    city_coordinates = {
        # Ukrainian cities
        "–∫–∏—ó–≤": {"lat": 50.4501, "lon": 30.5234, "name": "–ö–∏—ó–≤"},
        "–ª—å–≤—ñ–≤": {"lat": 49.8397, "lon": 24.0297, "name": "–õ—å–≤—ñ–≤"},
        "—Ö–∞—Ä–∫—ñ–≤": {"lat": 49.9935, "lon": 36.2304, "name": "–•–∞—Ä–∫—ñ–≤"},
        "–æ–¥–µ—Å–∞": {"lat": 46.4825, "lon": 30.7233, "name": "–û–¥–µ—Å–∞"},
        "–¥–Ω—ñ–ø—Ä–æ": {"lat": 48.4647, "lon": 35.0462, "name": "–î–Ω—ñ–ø—Ä–æ"},
        "–∑–∞–ø–æ—Ä—ñ–∂–∂—è": {"lat": 47.8388, "lon": 35.1396, "name": "–ó–∞–ø–æ—Ä—ñ–∂–∂—è"},
        
        # International cities (lowercase for matching)
        "london": {"lat": 51.5074, "lon": -0.1278, "name": "London"},
        "new york": {"lat": 40.7128, "lon": -74.0060, "name": "New York"},
        "paris": {"lat": 48.8566, "lon": 2.3522, "name": "Paris"},
        "berlin": {"lat": 52.5200, "lon": 13.4050, "name": "Berlin"},
        "madrid": {"lat": 40.4168, "lon": -3.7038, "name": "Madrid"},
        "rome": {"lat": 41.9028, "lon": 12.4964, "name": "Rome"},
        "tokyo": {"lat": 35.6762, "lon": 139.6503, "name": "Tokyo"},
        "sydney": {"lat": -33.8688, "lon": 151.2093, "name": "Sydney"}
    }
    
    # Get coordinates for the city (AI already normalized the name)
    location_lower = location.lower().strip()
    coords = city_coordinates.get(location_lower)
    
    if not coords:
        # Default to Kyiv if city not found
        coords = city_coordinates["–∫–∏—ó–≤"]
        city_name = f"{location} (fallback: –ö–∏—ó–≤)"
        logger.warning(f"‚ö†Ô∏è City '{location}' not found in coordinates, using Kyiv")
    else:
        city_name = coords["name"]
        logger.info(f"üìç Found coordinates for {location} -> {city_name}")
    
    # Try One Call API 3.0 first
    try:
        url = "https://api.openweathermap.org/data/3.0/onecall"
        params = {
            "lat": coords["lat"],
            "lon": coords["lon"],
            "appid": OPENWEATHER_API_KEY,
            "units": "metric",
            "lang": "uk",
            "exclude": "minutely,alerts"
        }
        
        response = requests.get(url, params=params, timeout=5)
        response.raise_for_status()
        
        data = response.json()
        current = data["current"]
        
        return {
            "success": True,
            "location": city_name,
            "temperature": f"{round(current['temp'])}¬∞C",
            "description": current["weather"][0]["description"].capitalize(),
            "humidity": current["humidity"],
            "pressure": current["pressure"],
            "wind_speed": current.get("wind_speed", 0),
            "feels_like": f"{round(current['feels_like'])}¬∞C",
            "visibility": current.get("visibility", "N/A"),
            "uv_index": current.get("uvi", "N/A"),
            "mock_data": False,
            "api_version": "3.0 One Call"
        }
        
    except requests.exceptions.RequestException as e:
        logger.warning(f"One Call API 3.0 failed: {e}, trying fallback API 2.5...")
        
        # Fallback to standard API 2.5
        try:
            url = f"{OPENWEATHER_BASE_URL}/weather"
            params = {
                "q": city_name,
                "appid": OPENWEATHER_API_KEY,
                "units": "metric",
                "lang": "uk"
            }
            
            response = requests.get(url, params=params, timeout=5)
            response.raise_for_status()
            
            data = response.json()
            
            return {
                "success": True,
                "location": data["name"],
                "temperature": f"{round(data['main']['temp'])}¬∞C",
                "description": data["weather"][0]["description"].capitalize(),
                "humidity": data["main"]["humidity"],
                "pressure": data["main"]["pressure"],
                "wind_speed": data.get("wind", {}).get("speed", 0),
                "feels_like": f"{round(data['main']['feels_like'])}¬∞C",
                "mock_data": False,
                "api_version": "2.5 Standard"
            }
            
        except requests.exceptions.RequestException as e2:
            logger.error(f"Both APIs failed - 3.0: {e}, 2.5: {e2}")
            return generate_realistic_weather_mock(city_name, f"APIs unavailable: {str(e2)}")

def generate_realistic_weather_mock(location: str, error_msg: str) -> Dict[str, Any]:
    """Generate realistic weather data based on location and current time"""
    import random
    from datetime import datetime
    
    current_hour = datetime.now().hour
    current_month = datetime.now().month
    
    # Seasonal temperature adjustments for Ukraine
    if "–∫–∏—ó–≤" in location.lower() or "kyiv" in location.lower():
        base_temp = {
            12: -2, 1: -5, 2: -3,  # Winter
            3: 5, 4: 12, 5: 18,    # Spring  
            6: 22, 7: 25, 8: 24,   # Summer
            9: 18, 10: 11, 11: 3   # Autumn
        }.get(current_month, 10)
    else:
        base_temp = 15  # Default
    
    # Daily temperature variation
    if 6 <= current_hour <= 18:  # Day
        temp_adjustment = random.randint(2, 8)
    else:  # Night
        temp_adjustment = random.randint(-5, 2)
        
    temp = base_temp + temp_adjustment
    feels_like = temp + random.randint(-3, 3)
    
    # Weather conditions based on season
    winter_conditions = ["—Å–Ω—ñ–≥", "—Ö–º–∞—Ä–Ω–æ", "—Ç—É–º–∞–Ω", "—è—Å–Ω–æ"]
    summer_conditions = ["—Å–æ–Ω—è—á–Ω–æ", "—Ö–º–∞—Ä–Ω–æ", "–¥–æ—â", "–≥—Ä–æ–∑–æ–≤–µ –Ω–µ–±–æ"]
    spring_autumn = ["—Ö–º–∞—Ä–Ω–æ", "–¥–æ—â", "—è—Å–Ω–æ", "—Ç—É–º–∞–Ω"]
    
    if current_month in [12, 1, 2]:
        conditions = winter_conditions
    elif current_month in [6, 7, 8]:
        conditions = summer_conditions
    else:
        conditions = spring_autumn
        
    description = random.choice(conditions)
    
    return {
        "success": True,
        "location": location,
        "temperature": f"{temp}¬∞C",
        "description": description.capitalize(),
        "humidity": random.randint(40, 85),
        "pressure": random.randint(995, 1025),
        "wind_speed": round(random.uniform(0.5, 8.0), 1),
        "feels_like": f"{feels_like}¬∞C",
        "visibility": "10 –∫–º",
        "uv_index": random.randint(0, 8),
        "mock_data": True,
        "api_version": "Enhanced Mock",
        "note": "Realistic demo data until API activates"
    }

async def is_navigation_request_ai(message: str) -> bool:
    """Use AI to detect if message is a navigation/transport request"""
    if not OPENAI_AVAILABLE or not OPENAI_API_KEY:
        # Fallback to simple keyword detection
        message_lower = message.lower()
        navigation_keywords = ['–º–∞—Ä—à—Ä—É—Ç', '–¥–æ—Ä–æ–≥–∞', '–¥–æ—ó—Ö–∞—Ç–∏', '–ø—Ä–æ—ó—Ö–∞—Ç–∏', '—ó—Ö–∞—Ç–∏', '–¥—ñ–π—Ç–∏', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ø—Ä–æ–±–∫–∏', 'traffic', 'route', '–Ω–∞–≤—ñ–≥–∞—Ü—ñ—è', '–ø—Ä–æ—ó–∑–¥']
        return any(word in message_lower for word in navigation_keywords)
    
    try:
        system_prompt = """–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏—Ö —Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤.
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–æ–º –ø—Ä–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é, –º–∞—Ä—à—Ä—É—Ç–∏ –∞–±–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.

–ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∑–∞–ø–∏—Ç–∏ –≤–∫–ª—é—á–∞—é—Ç—å:
- –ü—Ä–æ—Ö–∞–Ω–Ω—è –ø—Ä–æ–∫–ª–∞—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç ("—è–∫ –¥–æ—ó—Ö–∞—Ç–∏", "–º–∞—Ä—à—Ä—É—Ç –¥–æ", "–¥—ñ–π—Ç–∏ –¥–æ")  
- –ó–∞–ø–∏—Ç–∏ –ø—Ä–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç ("–≥—Ä–æ–º–∞–¥—Å—å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–∞–≤—Ç–æ–±—É—Å", "–º–µ—Ç—Ä–æ")
- –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–±–∫–∏ ("–ø—Ä–æ–±–∫–∏ –Ω–∞", "traffic")
- –ü—ñ—à–æ—Ö—ñ–¥–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ ("—è–∫ –¥—ñ–π—Ç–∏", "–ø—ñ—à–∫–∏")

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò "YES" –∞–±–æ "NO" –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å."""

        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message}
            ],
            max_tokens=10,
            temperature=0.1
        )
        
        result = response.choices[0].message.content.strip().upper()
        return result == "YES"
        
    except Exception as e:
        logger.error(f"‚ùå AI navigation detection failed: {e}")
        # Fallback to keyword detection
        message_lower = message.lower()
        navigation_keywords = ['–º–∞—Ä—à—Ä—É—Ç', '–¥–æ—Ä–æ–≥–∞', '–¥–æ—ó—Ö–∞—Ç–∏', '–ø—Ä–æ—ó—Ö–∞—Ç–∏', '—ó—Ö–∞—Ç–∏', '–¥—ñ–π—Ç–∏', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ø—Ä–æ–±–∫–∏', 'traffic', 'route', '–Ω–∞–≤—ñ–≥–∞—Ü—ñ—è', '–ø—Ä–æ—ó–∑–¥']
        return any(word in message_lower for word in navigation_keywords)

async def extract_navigation_with_ai(message: str) -> dict:
    """Use AI to extract navigation details from message"""
    if not OPENAI_AVAILABLE or not OPENAI_API_KEY:
        return extract_navigation_fallback(message)
    
    try:
        system_prompt = """–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ —Ç–µ–∫—Å—Ç—É.
–ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏—Ç—è–≥–Ω–∏:
1. –ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (—É –Ω–∞–∑–∏–≤–Ω–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É)
2. –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É

–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø—É–Ω–∫—Ç—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:
- –ü–µ—Ä–µ–≤–µ–¥–∏ —É –Ω–∞–∑–∏–≤–Ω–∏–π –≤—ñ–¥–º—ñ–Ω–æ–∫: "–¥–æ –æ—Ñ—ñ—Å—É" ‚Üí "–û—Ñ—ñ—Å", "–≤ —Ü–µ–Ω—Ç—Ä" ‚Üí "–¶–µ–Ω—Ç—Ä"
- –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –º—ñ—Å—Ü–µ - –ø–æ–≤–µ—Ä–Ω–∏ null

–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:
- car (–∞–≤—Ç–æ–º–æ–±—ñ–ª—å) - –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
- transit (–≥—Ä–æ–º–∞–¥—Å—å–∫–∏–π) - —è–∫—â–æ –∑–≥–∞–¥—É—î—Ç—å—Å—è –∞–≤—Ç–æ–±—É—Å, –º–µ—Ç—Ä–æ, –º–∞—Ä—à—Ä—É—Ç–∫–∞  
- walking (–ø—ñ—à–∫–∏) - —è–∫—â–æ –∑–≥–∞–¥—É—î—Ç—å—Å—è –¥—ñ–π—Ç–∏, –ø—ñ—à–∫–∏, –ø–µ—à–∫–æ–º

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:
{
  "destination": "–û—Ñ—ñ—Å" –∞–±–æ null,
  "transport_type": "car|transit|walking",
  "transport_mode": "–∞–≤—Ç–æ–º–æ–±—ñ–ª—å|–≥—Ä–æ–º–∞–¥—Å—å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç|–ø—ñ—à–∫–∏",
  "has_destination": true/false
}"""

        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message}
            ],
            max_tokens=100,
            temperature=0.1
        )
        
        result = response.choices[0].message.content.strip()
        navigation_data = json.loads(result)
        
        logger.info(f"ü§ñ AI extracted navigation: {navigation_data} from '{message}'")
        return navigation_data
        
    except Exception as e:
        logger.error(f"‚ùå AI navigation extraction failed: {e}")
        return extract_navigation_fallback(message)

def extract_navigation_fallback(message: str) -> dict:
    """Fallback navigation extraction when AI is not available"""
    message_lower = message.lower()
    
    # Simple destination extraction patterns
    destination_patterns = [
        r'–¥–æ\s+([–∞-—è—ñ'']+)',
        r'–≤\s+([–∞-—è—ñ'']+)',  
        r'–Ω–∞\s+([–∞-—è—ñ'']+)',
    ]
    
    destination = None
    for pattern in destination_patterns:
        match = re.search(pattern, message_lower)
        if match:
            potential_dest = match.group(1).strip()
            if len(potential_dest) > 2:
                destination = potential_dest.capitalize()
                break
    
    # Transport type detection
    transport_type = "car"
    transport_mode = "–∞–≤—Ç–æ–º–æ–±—ñ–ª—å"
    
    if any(word in message_lower for word in ['–∞–≤—Ç–æ–±—É—Å', '–º–µ—Ç—Ä–æ', '–º–∞—Ä—à—Ä—É—Ç–∫–∞', '–≥—Ä–æ–º–∞–¥—Å—å–∫–∏–π']):
        transport_type = "transit"
        transport_mode = "–≥—Ä–æ–º–∞–¥—Å—å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    elif any(word in message_lower for word in ['–¥—ñ–π—Ç–∏', '–ø—ñ—à–∫–∏', '–ø–µ—à–∫–æ–º']):
        transport_type = "walking"
        transport_mode = "–ø—ñ—à–∫–∏"
    
    return {
        "destination": destination,
        "transport_type": transport_type,
        "transport_mode": transport_mode,
        "has_destination": destination is not None
    }

# Add OpenAPI tools and multi-agent support
import httpx
from typing import Optional, Dict, Any

# OpenAPI Integration class
class OpenAPIIntegration:
    def __init__(self):
        self.session = httpx.AsyncClient(timeout=30.0)
    
    async def call_external_api(self, url: str, method: str = "GET", headers: Dict[str, str] = None, data: Dict[str, Any] = None):
        """Call external API"""
        try:
            if method.upper() == "GET":
                response = await self.session.get(url, headers=headers, params=data)
            elif method.upper() == "POST":
                response = await self.session.post(url, headers=headers, json=data)
            elif method.upper() == "PUT":
                response = await self.session.put(url, headers=headers, json=data)
            elif method.upper() == "DELETE":
                response = await self.session.delete(url, headers=headers)
            else:
                raise ValueError(f"Unsupported method: {method}")
            
            return {
                "status_code": response.status_code,
                "success": response.status_code < 400,
                "data": response.json() if response.text else None,
                "text": response.text
            }
        except Exception as e:
            return {
                "status_code": 500,
                "success": False,
                "error": str(e),
                "data": None
            }
    
    async def get_weather_via_api(self, city: str) -> Dict[str, Any]:
        """Get weather via OpenWeatherMap API"""
        api_key = os.getenv("OPENWEATHER_API_KEY")
        if not api_key:
            return {
                "success": False,
                "error": "API key not found",
                "demo_data": True
            }
        
        url = f"http://api.openweathermap.org/data/2.5/weather"
        params = {
            "q": city,
            "appid": api_key,
            "units": "metric",
            "lang": "ua"
        }
        
        result = await self.call_external_api(url, "GET", data=params)
        if result["success"] and result["data"]:
            weather = result["data"]
            return {
                "success": True,
                "location": weather.get("name", city),
                "temperature": f"{weather['main']['temp']:.1f}¬∞C",
                "description": weather["weather"][0]["description"],
                "humidity": f"{weather['main']['humidity']}%",
                "feels_like": f"{weather['main']['feels_like']:.1f}¬∞C",
                "wind_speed": f"{weather['wind']['speed']} –º/—Å",
                "real_data": True
            }
        
        return result
    
    async def get_news_via_api(self, query: str = "Ukraine") -> Dict[str, Any]:
        """Get news via NewsAPI"""
        api_key = os.getenv("NEWS_API_KEY")
        if not api_key:
            return {
                "success": False,
                "error": "News API key not found",
                "demo_data": True
            }
        
        url = "https://newsapi.org/v2/everything"
        params = {
            "q": query,
            "apiKey": api_key,
            "sortBy": "publishedAt",
            "pageSize": 5,
            "language": "en"
        }
        
        result = await self.call_external_api(url, "GET", data=params)
        return result

# Initialize OpenAPI integration
openapi_integration = OpenAPIIntegration()

# Add to existing imports after the other imports

# Add OpenAPI endpoints after the existing endpoints

@app.post("/api/v1/openapi/call")
async def call_openapi_endpoint(request: Request):
    """Call external API endpoint"""
    try:
        body = await request.json()
        url = body.get("url")
        method = body.get("method", "GET")
        headers = body.get("headers", {})
        data = body.get("data", {})
        
        if not url:
            raise HTTPException(status_code=400, detail="URL is required")
        
        result = await openapi_integration.call_external_api(url, method, headers, data)
        
        return {
            "success": result["success"],
            "status_code": result["status_code"],
            "data": result.get("data"),
            "error": result.get("error"),
            "agent_used": "API Integration Specialist",
            "timestamp": datetime.now().isoformat()
        }
    
    except Exception as e:
        logger.error(f"Error in OpenAPI call: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/openapi/weather/{city}")
async def get_weather_openapi(city: str):
    """Get weather via OpenAPI"""
    try:
        result = await openapi_integration.get_weather_via_api(city)
        
        if result.get("success"):
            return {
                "success": True,
                "weather_data": result,
                "agent_used": "Weather API Specialist",
                "timestamp": datetime.now().isoformat()
            }
        else:
            # Fallback to demo data
            demo_weather = generate_demo_weather(city)
            return {
                "success": True,
                "weather_data": demo_weather,
                "agent_used": "Weather Demo Mode",
                "note": "Using demo data - API key not configured",
                "timestamp": datetime.now().isoformat()
            }
    
    except Exception as e:
        logger.error(f"Error getting weather via OpenAPI: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/openapi/news")
async def get_news_openapi(query: str = "Ukraine"):
    """Get news via OpenAPI"""
    try:
        result = await openapi_integration.get_news_via_api(query)
        
        if result.get("success"):
            return {
                "success": True,
                "news_data": result,
                "agent_used": "News API Specialist",
                "timestamp": datetime.now().isoformat()
            }
        else:
            return {
                "success": False,
                "error": result.get("error", "Failed to fetch news"),
                "agent_used": "News API Specialist",
                "note": "News API key not configured",
                "timestamp": datetime.now().isoformat()
            }
    
    except Exception as e:
        logger.error(f"Error getting news via OpenAPI: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/agents")
async def get_available_agents():
    """Get list of available agents"""
    return {
        "agents": [
            {
                "name": "Personal Assistant",
                "role": "General conversation and task management",
                "capabilities": ["navigation", "weather", "calendar", "reminders"]
            },
            {
                "name": "Navigation Specialist", 
                "role": "AI-powered navigation and routing",
                "capabilities": ["directions", "maps", "transport_modes"]
            },
            {
                "name": "Weather Specialist",
                "role": "Weather information and forecasts", 
                "capabilities": ["current_weather", "forecasts", "alerts"]
            },
            {
                "name": "API Integration Specialist",
                "role": "External API calls and data integration",
                "capabilities": ["openapi", "external_services", "data_fetching"]
            },
            {
                "name": "Calendar Manager",
                "role": "Event and meeting management",
                "capabilities": ["events", "scheduling", "reminders"]
            }
        ],
        "timestamp": datetime.now().isoformat()
    }

# Add missing functions before the existing generate_smart_response function

async def extract_city_from_message(message: str) -> str:
    """Extract city name from message using AI"""
    return await extract_location_with_ai(message)

def get_weather_icon(description: str) -> str:
    """Get weather emoji icon based on description"""
    description_lower = description.lower()
    
    if any(word in description_lower for word in ['—Å–æ–Ω—Ü–µ', '—è—Å–Ω–æ', 'sunny', 'clear']):
        return "‚òÄÔ∏è"
    elif any(word in description_lower for word in ['—Ö–º–∞—Ä–Ω–æ', 'cloudy', 'overcast']):
        return "‚òÅÔ∏è"
    elif any(word in description_lower for word in ['–¥–æ—â', 'rain', '–¥—Ä—ñ–±–Ω–∏–π']):
        return "üåßÔ∏è"
    elif any(word in description_lower for word in ['—Å–Ω—ñ–≥', 'snow', '—Å–Ω—ñ–≥–æ–ø–∞–¥']):
        return "‚ùÑÔ∏è"
    elif any(word in description_lower for word in ['—Ç—É–º–∞–Ω', 'fog', 'mist']):
        return "üå´Ô∏è"
    elif any(word in description_lower for word in ['–≥—Ä–æ–∑–∞', 'thunder', 'storm']):
        return "‚õàÔ∏è"
    else:
        return "üå§Ô∏è"

def generate_demo_weather(city: str) -> dict:
    """Generate demo weather data"""
    import random
    from datetime import datetime
    
    current_month = datetime.now().month
    
    # Seasonal temperature for Ukrainian cities
    if city.lower() in ['–∫–∏—ó–≤', 'kyiv', 'kiev']:
        base_temp = {
            12: -2, 1: -5, 2: -3,  # Winter
            3: 5, 4: 12, 5: 18,    # Spring  
            6: 22, 7: 25, 8: 24,   # Summer
            9: 18, 10: 11, 11: 3   # Autumn
        }.get(current_month, 10)
    else:
        base_temp = 15
    
    temp = base_temp + random.randint(-3, 6)
    feels_like = temp + random.randint(-2, 3)
    
    conditions = ["—è—Å–Ω–æ", "—Ö–º–∞—Ä–Ω–æ", "–¥–æ—â", "—Å–æ–Ω—è—á–Ω–æ"]
    description = random.choice(conditions)
    
    return {
        "location": city,
        "temperature": f"{temp}¬∞C",
        "description": description,
        "humidity": f"{random.randint(40, 85)}%",
        "feels_like": f"{feels_like}¬∞C",
        "wind_speed": f"{random.uniform(0.5, 8.0):.1f} –º/—Å"
    }

async def ai_extract_navigation_info(message: str) -> dict:
    """Extract navigation info using AI - wrapper for existing function"""
    return await extract_navigation_with_ai(message)

if __name__ == "__main__":
    logger.info("üöÄ Starting CrashCurse Backend - Fixed Version")
    
    uvicorn.run(
        app,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ app –Ω–∞–ø—Ä—è–º—É –∑–∞–º—ñ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
        host="0.0.0.0",
        port=8000,
        reload=False,  # –í–Ü–î–ö–õ–Æ–ß–ê–Ñ–ú–û reload —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—ñ–≤
        log_level="info"
    ) 